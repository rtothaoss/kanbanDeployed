{"version":3,"sources":["store/actions/projectActions.js","store/actions/actionTypes.js","securityUtils/setJWTToken.js","store/actions/securityActions.js","components/project/ProjectItem.js","components/project/CreateProjectButton.js","components/Dashboard.js","components/layout/Header.js","components/project/AddProject.js","components/project/UpdateProject.js","components/projectBoard/projectTasks/ProjectTask.js","store/actions/backlogActions.js","components/projectBoard/Backlog.js","components/projectBoard/ProjectBoard.js","components/projectBoard/projectTasks/AddProjectTask.js","components/projectBoard/projectTasks/UpdateProjectTask.js","components/layout/Landing.js","components/userManagement/Register.js","components/userManagement/Login.js","securityUtils/SecureRoute.js","App.js","serviceWorker.js","store/reducers/errorReducer.js","store/reducers/projectReducer.js","store/reducers/backlogReducer.js","store/reducers/securityReducer.js","index.js"],"names":["createProject","project","history","dispatch","a","axios","post","push","type","payload","response","data","setJWTToken","token","defaults","headers","common","logout","localStorage","removeItem","ProjectItem","onDeleteHandler","id","props","deleteProject","className","this","projectIdentifier","projectName","description","to","href","onClick","Component","connect","window","confirm","delete","actions","CreateProjectButton","Fragment","Dashboard","getProjects","projectItems","map","item","key","state","projects","get","res","Header","location","headerLinks","security","validToken","user","userIsAuthenticated","fullName","bind","userIsNotAuthenticated","data-toggle","data-target","AddProject","start_date","end_date","errors","onChangeHandler","e","target","name","value","setState","onSubmitHandler","preventDefault","newProject","nextProps","onSubmit","classnames","placeholder","onChange","UpdateProject","updatedProject","match","params","getProject","disabled","ProjectTask","onDeleteClickHandler","backlog_id","pt_id","deleteProjectTask","priorityString","priorityClass","project_task","priority","projectSequence","summary","acceptanceCriteria","Backlog","tasks","project_tasks_prop","todoItems","inProgressItems","doneItems","i","length","console","log","status","ProjectBoard","getBacklog","BoardContent","backlog","project_tasks","projectNotFound","role","boardAlgorithm","AddProjectTask","dueDate","newTask","addProjectTask","UpdateProjectTask","create_At","updateProjectTask","getProjectTask","patch","Landing","Register","username","password","confirmPassword","newUser","createNewUser","action","Login","LoginRequest","login","setItem","decoded","jwt_decode","component","otherProps","render","App","exact","path","Boolean","hostname","INITIAL_STATE","reducer","filter","initialState","booleanActionPayload","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","errorReducer","projectReducer","backlogReducer","store","createStore","applyMiddleware","thunk","jwtToken","decoded_jwtToken","currentTime","Date","now","exp","app","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.779ccd98.chunk.js","sourcesContent":["import * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nexport const createProject = (project, history) => {\n    return async dispatch => {\n        try {\n            await axios.post('/api/project', project)\n            history.push('/dashboard')\n            dispatch({\n                type: actionTypes.GET_ERRORS,\n                payload: {}\n            })\n        } catch (err) {\n            dispatch({\n                type: actionTypes.GET_ERRORS,\n                payload: err.response.data\n            })\n        }\n    }\n}\n\nexport const getProjects = () => {\n    return async dispatch => {\n        const res = await axios.get('/api/project/all')\n        dispatch({\n            type: actionTypes.GET_PROJECTS,\n            payload: res.data\n        })\n    }\n}\n\nexport const getProject = (id, history) => {\n    return async dispatch => {\n        try {\n            const res = await axios.get(`/api/project/${id}`)\n            dispatch({\n                type: actionTypes.GET_PROJECT,\n                payload: res.data\n            })\n        } catch(err) {\n            history.push('/dashboard')\n        }\n\n    }\n}\n\nexport const updateProject = (id, history) => {\n    return async dispatch => {\n            const res = await axios.put(`/api/project/${id}`)\n            dispatch({\n                type: actionTypes.GET_PROJECT,\n                payload: res.data\n            })\n            \n    }\n}\n\nexport const deleteProject = (id) => {\n    return async dispatch => {\n    if (\n        window.confirm(\n          \"Are you sure? This will delete the project and all the data related to it\"\n        )\n      ) {\n        await axios.delete(`/api/project/${id}`);\n        dispatch({\n          type: actionTypes.DELETE_PROJECT,\n          payload: id\n        });\n      }\n    }\n}\n","export const GET_ERRORS = 'GET_ERRORS';\nexport const GET_PROJECTS = 'GET_PROJECTS';\nexport const GET_PROJECT = 'GET_PROJECT';\nexport const UPDATE_PROJECT = 'UPDATE_PROJECT';\nexport const DELETE_PROJECT = 'DELETE_PROJECT';\n\nexport const GET_BACKLOG = 'GET_BACKLOG';\nexport const GET_PROJECT_TASK = 'GET_PROJECT_TASK';\nexport const DELETE_PROJECT_TASK = 'DELETE_PROJECT_TASK';\n\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';","import axios from \"axios\";\n\nconst setJWTToken = token => {\n  if (token) {\n    axios.defaults.headers.common[\"Authorization\"] = token;\n  } else {\n    delete axios.defaults.headers.common[\"Authorization\"];\n  }\n};\n\nexport default setJWTToken;","import axios from 'axios';\nimport * as actionTypes from './actionTypes';\nimport setJWTToken from '../../securityUtils/setJWTToken';\nimport jwt_decode from 'jwt-decode';\n\nexport const createNewUser = (newUser, history) => {\n    return async dispatch => {\n        try {\n            await axios.post('/api/users/register', newUser)\n            history.push('/login')\n            dispatch({\n                type: actionTypes.GET_ERRORS,\n                payload: {}\n            })\n        } catch(err) {\n            dispatch({\n                type: actionTypes.GET_ERRORS,\n                payload: err.response.data\n            })\n        }\n    }\n}\n\nexport const login = LoginRequest => {\n    return async dispatch => {\n        try {\n            const res = await axios.post('/api/users/login', LoginRequest)\n            const { token } = res.data\n            localStorage.setItem('jwtToken', token)\n            setJWTToken(token)\n            const decoded = jwt_decode(token)\n            dispatch({\n                type: actionTypes.SET_CURRENT_USER,\n                payload: decoded\n            })\n        } catch(err) {\n            console.log(err)\n            dispatch({\n                type:actionTypes.GET_ERRORS,\n                payload: err.response.data\n            })\n        }\n    }\n}\n\nexport const logout = () => dispatch => {\n    localStorage.removeItem(\"jwtToken\");\n    setJWTToken(false);\n    dispatch({\n      type: actionTypes.SET_CURRENT_USER,\n      payload: {}\n    });\n  };","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions';\n\nclass ProjectItem extends Component {\n\n    onDeleteHandler = (id) => {\n        this.props.deleteProject(id)\n    }\n\n\n    render() {\n\n        \n\n        return (\n            <div className=\"container\">\n            <div className=\"card card-body bg-light mb-3\">\n                <div className=\"row\">\n                    <div className=\"col-2\">\n                        <span className=\"mx-auto\">{this.props.projectIdentifier}</span>\n                    </div>\n                    <div className=\"col-lg-6 col-md-4 col-8\">\n                        <h3>{this.props.projectName}</h3>\n                        <p>{this.props.description}</p>\n                    </div>\n                    <div className=\"col-md-4 d-none d-lg-block\">\n                        <ul className=\"list-group\">\n                            <Link to={`/projectBoard/${this.props.projectIdentifier}`}>\n                                <li className=\"list-group-item board\">\n                                    <i className=\"fa fa-flag-checkered pr-1\">Project Board </i>\n                                </li>\n                            </Link>\n                            <Link to={`/updateProject/${this.props.projectIdentifier}`}>\n                                <li className=\"list-group-item update\">\n                                    <i className=\"fa fa-edit pr-1\">Update Project Info</i>\n                                </li>\n                            </Link>\n                            <a href=\"\">\n                                <li \n                                    className=\"list-group-item delete\"\n                                    onClick={() => this.onDeleteHandler(this.props.projectIdentifier)}\n                                >\n                                    <i className=\"fa fa-minus-circle pr-1\">Delete Project</i>\n                                </li>\n                            </a>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </div>\n        );\n    }\n}\n\nProjectItem.propTypes = {\n    deleteProject: PropTypes.func.isRequired\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        deleteProject: (id) => dispatch(actions.deleteProject(id))\n    }\n}\n\nexport default connect(null, mapDispatchToProps)(ProjectItem);","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst CreateProjectButton = () => {\n    return (\n        <React.Fragment>\n            <Link to=\"/addProject\" className=\"btn btn-lg btn-info\">\n                Create a Project\n        </Link>\n        </React.Fragment>\n    );\n}\n\nexport default CreateProjectButton;","import React, { Component } from 'react';\nimport ProjectItem from './project/ProjectItem';\nimport CreateProjectButton from './project/CreateProjectButton';\nimport { connect } from 'react-redux';\nimport * as actions from '../store/actions';\nimport PropTypes from 'prop-types';\n\n\nclass Dashboard extends Component {\n\n    componentDidMount(){\n        this.props.getProjects();\n    }\n\n    render() {\n\n        let projectItems;\n\n        if(this.props.project) {\n            projectItems = this.props.project.map(item => (\n                <ProjectItem \n                    key={item.projectIdentifier}\n                    projectIdentifier={item.projectIdentifier}\n                    projectName={item.projectName}\n                    description={item.description}\n                    \n                />\n            ))\n        }\n\n\n        return (\n            <div className=\"projects\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-12\">\n                            <h1 className=\"display-4 text-center\">Projects</h1>\n                            <br />\n                               <CreateProjectButton />\n                            <br />\n                            <hr />\n                            {projectItems}\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        project: state.project.projects\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getProjects: () => dispatch(actions.getProjects())\n    }\n}\n\nDashboard.propTypes = {\n    project: PropTypes.array.isRequired,\n    getProjects: PropTypes.func.isRequired\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions'\n\nclass Header extends Component {\n\n    logout() {\n        this.props.logout()\n        window.location.href = '/'\n    }\n\n\n    render() {\n\n        const { validToken, user } = this.props.security\n\n        const userIsAuthenticated = (\n            <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n                <ul className=\"navbar-nav mr-auto\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/dashboard\">\n                            Dashboard\n                  </Link>\n                    </li>\n                </ul>\n\n                <ul className=\"navbar-nav ml-auto\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/dashboard\">\n                            <i className=\"fas fa-user-circle mr-1\" />\n                            {user.fullName}\n                        </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link\n                            className=\"nav-link\"\n                            to=\"/logout\"\n                            onClick={this.logout.bind(this)}\n                        >\n                            Logout\n                  </Link>\n                    </li>\n                </ul>\n            </div>\n        );\n\n        const userIsNotAuthenticated = (\n            <div className=\"collapse navbar-collapse\" id=\"mobile-nav\">\n                <ul className=\"navbar-nav ml-auto\">\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/register\">\n                            Sign Up\n                  </Link>\n                    </li>\n                    <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to=\"/login\">\n                            Login\n                  </Link>\n                    </li>\n                </ul>\n            </div>\n        );\n\n        let headerLinks;\n\n        if (validToken && user) {\n            headerLinks = userIsAuthenticated;\n        } else {\n            headerLinks = userIsNotAuthenticated;\n        }\n\n\n\n        return (\n            <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-4\">\n                <div className=\"container\">\n                    <Link className=\"navbar-brand\" to='/'>\n                        Personal Project Management Tool\n                </Link>\n                    <button\n                        className=\"navbar-toggler\"\n                        type=\"button\"\n                        data-toggle=\"collapse\"\n                        data-target=\"#mobile-nav\">\n                        <span className=\"navbar-toggler-icon\" />\n                    </button>\n\n                    {headerLinks}\n                </div>\n            </nav>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        security: state.security\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        logout: () => dispatch(actions.logout())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions';\nimport classnames from 'classnames';\n\nclass AddProject extends Component {\n\n    state = {\n        projectName: \"\",\n        projectIdentifier: \"\",\n        description: \"\",\n        start_date: \"\",\n        end_date: \"\",\n        errors: {}\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            })\n        }\n    }\n\n    onChangeHandler = (e) => {\n        const { name, value } = e.target;\n        this.setState({\n            [name]: value\n        })\n    }\n\n    onSubmitHandler = (e) => {\n        e.preventDefault()\n        const newProject = {\n            projectName: this.state.projectName,\n            projectIdentifier: this.state.projectIdentifier,\n            description: this.state.description,\n            start_date: this.state.start_date,\n            end_date: this.state.end_date\n        }\n        this.props.createProject(newProject, this.props.history)\n    }\n\n\n    render() {\n\n        const { errors } = this.state\n\n\n        return (\n            <div className=\"register\">\n\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h5 className=\"display-4 text-center\">Create Project form</h5>\n                            <hr />\n                            <form onSubmit={this.onSubmitHandler}>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"text\"\n                                        className={classnames(\"form-control form-control-lg \", {\n                                            'is-invalid': errors.projectName\n                                        })}\n                                        placeholder=\"Project Name\"\n                                        name=\"projectName\"\n                                        value={this.state.projectName}\n                                        onChange={this.onChangeHandler}\n                                    />\n                                    {errors.projectName && (\n                                        <div className='invalid-feedback'>{errors.projectName}</div>\n                                    )}\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"text\"\n                                        className={classnames(\"form-control form-control-lg\", {\n                                            'is-invalid': errors.projectIdentifier\n                                        })}\n                                        placeholder=\"Unique Project ID\"\n                                        name=\"projectIdentifier\"\n                                        value={this.state.projectIdentifier}\n                                        onChange={this.onChangeHandler}\n                                    />\n                                    {errors.projectIdentifier && (\n                                        <div className='invalid-feedback'>{errors.projectIdentifier}</div>\n                                    )}\n                                </div>\n\n\n                                <div className=\"form-group\">\n                                    <textarea\n                                        className={classnames(\"form-control form-control-lg\", {\n                                            'is-invalid': errors.description\n                                        })}\n                                        placeholder=\"Project Description\"\n                                        name=\"description\"\n                                        value={this.state.description}\n                                        onChange={this.onChangeHandler}\n                                    />\n                                    {errors.description && (\n                                        <div className='invalid-feedback'>{errors.description}</div>\n                                    )}\n                                </div>\n\n                                <h6>Start Date</h6>\n                                <div className=\"form-group\">\n\n                                    <input\n                                        type=\"date\"\n                                        className=\"form-control form-control-lg\"\n                                        name=\"start_date\"\n                                        value={this.state.start_date}\n                                        onChange={this.onChangeHandler}\n                                    />\n                                </div>\n                                <h6>Estimated End Date</h6>\n                                <div className=\"form-group\">\n\n                                    <input\n                                        type=\"date\"\n                                        className=\"form-control form-control-lg\"\n                                        name=\"end_date\"\n                                        value={this.state.end_date}\n                                        onChange={this.onChangeHandler}\n                                    />\n                                </div>\n\n                                <input\n                                    type=\"submit\"\n                                    className=\"btn btn-primary btn-block mt-4\"\n                                />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        errors: state.errors.errors\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        createProject: (project, history) => dispatch(actions.createProject(project, history))\n    }\n}\n\nAddProject.propTypes = {\n    createProject: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddProject);","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../store/actions'\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nclass UpdateProject extends Component {\n\n    state = {\n        id: \"\",\n        projectName: \"\",\n        projectIdentifier: \"\",\n        description: \"\",\n        start_date: \"\",\n        end_date: \"\",\n        errors: {}\n    }\n\n\n    componentDidMount() {\n        const { id } = this.props.match.params\n\n        this.props.getProject(id, this.props.history);\n\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            })\n        }\n        const {\n            id,\n            projectName,\n            projectIdentifier,\n            description,\n            start_date,\n            end_date,\n        } = nextProps.project\n        this.setState({\n            id,\n            projectName,\n            projectIdentifier,\n            description,\n            start_date,\n            end_date,\n        })\n    }\n\n    onChangeHandler = (e) => {\n        const { name, value } = e.target;\n        this.setState({\n            [name]: value\n        })\n    }\n\n    onSubmitHandler = (e) => {\n        e.preventDefault()\n        const updatedProject = {\n            id: this.state.id,\n            projectName: this.state.projectName,\n            projectIdentifier: this.state.projectIdentifier,\n            description: this.state.description,\n            start_date: this.state.start_date,\n            end_date: this.state.end_date\n        }\n        this.props.createProject(updatedProject, this.props.history)\n    }\n\n\n    render() {\n\n        const { errors } = this.props\n\n        return (\n            <div className=\"register\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <h5 className=\"display-4 text-center\">Update Project Form</h5>\n                            <hr />\n                            <form onSubmit={this.onSubmitHandler}> \n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"text\"\n                                        className={classnames(\"form-control form-control-lg \", {\n                                            'is-invalid': errors.projectName\n                                        })}\n                                        name='projectName'\n                                        value={this.state.projectName}\n                                        onChange={this.onChangeHandler}\n                                    />\n                                    {errors.projectName && (\n                                        <div className='invalid-feedback'>{errors.projectName}</div>\n                                    )}\n                                </div>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"text\"\n                                        className={classnames(\"form-control form-control-lg \", {\n                                            'is-invalid': errors.projectIdentifier\n                                        })}\n                                        name='projectIdentifier'\n                                        value={this.state.projectIdentifier}\n                                        onChange={this.onChangeHandler}\n                                        disabled \n                                        />\n                                        {errors.projectName && (\n                                        <div className='invalid-feedback'>{errors.projectIdentifier}</div>\n                                    )}\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <textarea\n                                        className={classnames(\"form-control form-control-lg \", {\n                                            'is-invalid': errors.description\n                                        })}\n                                        name='description'\n                                        value={this.state.description}\n                                        onChange={this.onChangeHandler}></textarea>\n                                        <div className='invalid-feedback'>{errors.description}</div>\n                                    \n                                </div>\n                                <h6>Start Date</h6>\n                                <div className=\"form-group\">\n                                    <input type=\"date\"\n                                        className=\"form-control form-control-lg\"\n                                        name=\"start_date\"\n                                        value={this.state.start_date}\n                                        onChange={this.onChangeHandler}\n                                    />\n                                </div>\n                                <h6>Estimated End Date</h6>\n                                <div className=\"form-group\">\n                                    <input type=\"date\"\n                                        className=\"form-control form-control-lg\"\n                                        name=\"end_date\"\n                                        value={this.state.end_date}\n                                        onChange={this.onChangeHandler}\n                                    />\n                                </div>\n\n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        project: state.project.project,\n        errors: state.errors.errors\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getProject: (id, history) => dispatch(actions.getProject(id, history)),\n        createProject: (project, history) => dispatch(actions.createProject(project, history))\n    }\n}\n\nUpdateProject.propTypes = {\n    project: PropTypes.object.isRequired,\n    createProject: PropTypes.func.isRequired,\n    getProject: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UpdateProject);","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\nimport * as actions from '../../../store/actions'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nclass ProjectTask extends Component {\n\n\n    onDeleteClickHandler = (backlog_id, pt_id) => {\n        this.props.deleteProjectTask(backlog_id, pt_id);\n      }\n\n\n    render() {\n\n        const { project_task } = this.props\n        let priorityString\n        let priorityClass\n\n        if (project_task.priority === 1) {\n            priorityClass = 'bg-danger text-light'\n            priorityString = 'HIGH'\n        }\n\n        if (project_task.priority === 2) {\n            priorityClass = \"bg-warning text-light\";\n            priorityString = \"MEDIUM\";\n        }\n\n        if (project_task.priority === 3) {\n            priorityClass = \"bg-info text-light\";\n            priorityString = \"LOW\";\n        }\n\n        return (\n            <div className=\"card mb-1 bg-light\">\n\n                <div className={`card-header text-primary ${priorityClass}`}>\n                    ID: {project_task.projectSequence} -- Priority: {priorityString}\n                </div>\n\n                <div className=\"card-body bg-light\">\n                    <h5 className=\"card-title\">{project_task.summary}</h5>\n                    <p className=\"card-text text-truncate \">\n                        {project_task.acceptanceCriteria}\n                    </p>\n                    <Link\n                        to={`/updateProjectTask/${project_task.projectIdentifier}/${\n                            project_task.projectSequence\n                            }`}\n                        className=\"btn btn-primary\"\n                    >\n                    View / Update\n                    </Link>\n\n                    <button\n            className=\"btn btn-danger ml-4\"\n            onClick={() => this.onDeleteClickHandler(project_task.projectIdentifier, project_task.projectSequence)}\n          >\n            Delete\n          </button>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        deleteProjectTask: (backlog_id, pt_id) => dispatch(actions.deleteProjectTask(backlog_id, pt_id))\n    }\n}\n\nProjectTask.propTypes = {\n    deleteProjectTask: PropTypes.func.isRequired\n  };\n\n\nexport default connect(null, mapDispatchToProps)(ProjectTask);","import axios from 'axios'\nimport * as actionTypes from './actionTypes'\n\nexport const addProjectTask = (backlog_id, project_task, history) => {\n    return async dispatch => {\n        try {\n            await axios.post(`/api/backlog/${backlog_id}`, project_task)\n            history.push(`/projectBoard/${backlog_id}`)\n            dispatch({\n                type: actionTypes.GET_ERRORS,\n                payload: {}\n            })\n        } catch (err) {\n            dispatch({\n                type: actionTypes.GET_ERRORS,\n                payload: err.response.data\n            })\n        }\n    }\n}\n\nexport const getBacklog = (backlog_id) => {\n    return async dispatch => {\n        try {\n            const res = await axios.get(`/api/backlog/${backlog_id}`)\n            dispatch({\n                type: actionTypes.GET_BACKLOG,\n                payload: res.data\n            })\n        } catch (err) {\n            dispatch({\n                type: actionTypes.GET_ERRORS,\n                payload: err.response.data\n            })\n        }\n    }\n}\n\nexport const getProjectTask = (backlog_id, pt_id, history) => {\n    return async dispatch => {\n        try {\n            const res = await axios.get(`/api/backlog/${backlog_id}/${pt_id}`)\n            dispatch({\n                type: actionTypes.GET_PROJECT_TASK,\n                payload: res.data\n            })\n        } catch (err) {\n            history.push('/dashboard')\n        }\n    }\n}\n\nexport const updateProjectTask = (backlog_id, pt_id, project_task, history) => {\n    return async dispatch => {\n        try {\n            await axios.patch(`/api/backlog/${backlog_id}/${pt_id}`, project_task);\n            history.push(`/projectBoard/${backlog_id}`);\n            dispatch({\n                type: actionTypes.GET_ERRORS,\n                payload: {}\n            });\n        } catch (err) {\n            dispatch({\n                type: actionTypes.GET_ERRORS,\n                payload: err.response.data\n            });\n        }\n    }\n}\n\nexport const deleteProjectTask = (backlog_id, pt_id) => async dispatch => {\n    if (\n      window.confirm(\n        `You are deleting project task ${pt_id}, this action cannot be undone`\n      )\n    ) {\n      await axios.delete(`/api/backlog/${backlog_id}/${pt_id}`);\n      dispatch({\n        type: actionTypes.DELETE_PROJECT_TASK,\n        payload: pt_id\n      });\n    }\n  };\n","import React, { Component } from 'react';\nimport ProjectTask from './projectTasks/ProjectTask'\n\nclass Backlog extends Component {\n\n\n    render() {\n\n        const { project_tasks_prop } = this.props\n\n        const tasks = project_tasks_prop.map(project_task => (\n            <ProjectTask key={project_task.id} project_task={project_task} />\n        ));\n\n        let todoItems = []\n        let inProgressItems = []\n        let doneItems = []\n\n        for (let i = 0; i < tasks.length; i++) {\n            console.log(tasks[i]);\n\n            if (tasks[i].props.project_task.status === \"TO_DO\") {\n                todoItems.push(tasks[i]);\n            }\n\n            if (tasks[i].props.project_task.status === \"IN_PROGRESS\") {\n                inProgressItems.push(tasks[i]);\n            }\n\n            if (tasks[i].props.project_task.status === \"DONE\") {\n                doneItems.push(tasks[i]);\n            }\n        }\n\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-4\">\n                        <div className=\"card text-center mb-2\">\n                            <div className=\"card-header bg-secondary text-white\">\n                                <h3>TO DO</h3>\n                            </div>\n                        </div>\n\n                        {todoItems}\n\n\n                    </div>\n                    <div className=\"col-md-4\">\n                        <div className=\"card text-center mb-2\">\n                            <div className=\"card-header bg-primary text-white\">\n                                <h3>In Progress</h3>\n                            </div>\n                        </div>\n\n                        {inProgressItems}\n\n                    </div>\n                    <div className=\"col-md-4\">\n                        <div className=\"card text-center mb-2\">\n                            <div className=\"card-header bg-success text-white\">\n                                <h3>Done</h3>\n                            </div>\n                        </div>\n\n                        {doneItems}\n\n\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Backlog;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport Backlog from './Backlog'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\nimport * as actions from '../../store/actions'\n\n\nclass ProjectBoard extends Component {\n\n    state = {\n        errors: {}\n    }\n\n\n    componentDidMount() {\n        const { id } = this.props.match.params\n        this.props.getBacklog(id);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n          this.setState({ errors: nextProps.errors });\n        }\n      }\n\n\n    render() {\n\n        const { id } = this.props.match.params\n\n        const { backlog } = this.props\n\n        const { errors } = this.state\n\n        let BoardContent;\n\n        const boardAlgorithm = (errors, project_tasks) => {\n          if (project_tasks.length < 1) {\n            \n            if (errors.projectNotFound) {\n              return (\n                <div className=\"alert alert-danger text-center\" role=\"alert\">\n                  {errors.projectNotFound}\n                </div>\n              );\n            } else if (errors.projectIdentifier) {\n              return (\n                <div className=\"alert alert-danger text-center\" role=\"alert\">\n                  {errors.projectIdentifier}\n                </div>\n              );\n            } else {\n              return (\n                <div className=\"alert alert-info text-center\" role=\"alert\">\n                  No Project Tasks on this board\n                </div>\n              );\n            }\n          } else {\n            return <Backlog project_tasks_prop={project_tasks} />;\n          }\n        };\n    \n        BoardContent = boardAlgorithm(errors, backlog);\n\n\n\n\n        return (\n            <div className=\"container\">\n                <Link to={`/addProjectTask/${id}`} className=\"btn btn-primary mb-3\">\n                    <i className=\"fas fa-plus-circle\"> Create Project Task</i>\n                </Link>\n                <br />\n                <hr />\n\n                {/* <Backlog project_tasks_prop={backlog}/> */}\n                {BoardContent}\n\n\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        backlog: state.backlog.project_tasks,\n        errors: state.errors.errors\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getBacklog: (id) => dispatch(actions.getBacklog(id))\n    }\n}\n\nProjectBoard.propTypes = {\n    backlog: PropTypes.array.isRequired,\n    getBacklog: PropTypes.func.isRequired,\n    errors: PropTypes.object.isRequired\n  };\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectBoard);","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport * as actions from '../../../store/actions'\nimport classnames from 'classnames'\nimport PropTypes from 'prop-types'\n\nclass AddProjectTask extends Component {\n\n\n    state = {\n        summary: '',\n        dueDate: '',\n        acceptanceCriteria: '',\n        status: '',\n        priority: 0,\n        projectIdentifier: this.props.match.params.id,\n        errors: {}\n    }\n\n    onChangeHandler = (e) => {\n        const { name, value } = e.target;\n        this.setState({\n            [name]: value\n        })\n    }\n\n\n    onSubmitHandler = (e) => {\n\n        e.preventDefault()\n        const newTask = {\n            summary: this.state.summary,\n            acceptanceCriteria: this.state.acceptanceCriteria,\n            status: this.state.status,\n            priority: this.state.priority,\n            dueDate: this.state.dueDate\n        }\n        this.props.addProjectTask(this.state.projectIdentifier, newTask, this.props.history)\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            })\n        }\n    }\n\n\n\n\n    render() {\n\n        const { id } = this.props.match.params\n        const { errors } = this.state\n\n        return (\n            <div className=\"add-PBI\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-md-8 m-auto\">\n                            <Link to={`/projectBoard/${id}`} className=\"btn btn-light\">\n                                Back to Project Board\n                        </Link>\n                            <h4 className=\"display-4 text-center\">Add Project Task</h4>\n                            <p className=\"lead text-center\">Project Name + Project Code</p>\n                            <form onSubmit={this.onSubmitHandler}>\n                                <div className=\"form-group\">\n                                    <input\n                                        type=\"text\"\n                                        className={classnames(\"form-control form-control-lg\", {\n                                            \"is-invalid\": errors.summary\n                                        })}\n                                        name=\"summary\"\n                                        placeholder=\"Project Task summary\"\n                                        value={this.state.summary}\n                                        onChange={this.onChangeHandler} />\n                                    {errors.summary && (\n                                        <div className=\"invalid-feedback\">{errors.summary}</div>\n                                    )}\n\n                                </div>\n                                <div className=\"form-group\">\n                                    <textarea\n                                        className=\"form-control form-control-lg\"\n                                        placeholder=\"Acceptance Criteria\"\n                                        name=\"acceptanceCriteria\"\n                                        value={this.state.acceptanceCriteria}\n                                        onChange={this.onChangeHandler}></textarea>\n                                </div>\n                                <h6>Due Date</h6>\n                                <div className=\"form-group\">\n                                    <input type=\"date\"\n                                        className=\"form-control form-control-lg\"\n                                        name=\"dueDate\"\n                                        value={this.state.dueDate}\n                                        onChange={this.onChangeHandler} />\n                                </div>\n                                <div className=\"form-group\">\n                                    <select\n                                        className=\"form-control form-control-lg\"\n                                        name=\"priority\"\n                                        value={this.state.priority}\n                                        onChange={this.onChangeHandler}\n                                    >\n                                        <option value={0}>Select Priority</option>\n                                        <option value={1}>High</option>\n                                        <option value={2}>Medium</option>\n                                        <option value={3}>Low</option>\n                                    </select>\n                                </div>\n\n                                <div className=\"form-group\">\n                                    <select className=\"form-control form-control-lg\" name=\"status\">\n                                        <option value=\"\">Select Status</option>\n                                        <option value=\"TO_DO\">TO DO</option>\n                                        <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n                                        <option value=\"DONE\">DONE</option>\n                                    </select>\n                                </div>\n\n                                <input type=\"submit\" className=\"btn btn-primary btn-block mt-4\" />\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => ({\n    errors: state.errors.errors\n})\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        addProjectTask: (backlog_id, newTask, history) => dispatch(actions.addProjectTask(backlog_id, newTask, history))\n    }\n}\n\nAddProjectTask.propTypes = {\n    addProjectTask: PropTypes.func.isRequired\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddProjectTask);","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport classnames from \"classnames\";\nimport * as actions from '../../../store/actions'\nimport PropTypes from \"prop-types\";\nimport { Link } from 'react-router-dom'\n\nclass UpdateProjectTask extends Component {\n\n  state = {\n    id: \"\",\n    projectSequence: \"\",\n    summary: \"\",\n    acceptanceCriteria: \"\",\n    status: \"\",\n    priority: \"\",\n    dueDate: \"\",\n    projectIdentifier: \"\",\n    create_At: \"\",\n    errors: {}\n  };\n\n  componentDidMount() {\n    const { backlog_id, pt_id } = this.props.match.params;\n    this.props.getProjectTask(backlog_id, pt_id, this.props.history);\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.errors) {\n      this.setState({ errors: nextProps.errors });\n    }\n\n    const {\n      id,\n      projectSequence,\n      summary,\n      acceptanceCriteria,\n      status,\n      priority,\n      dueDate,\n      projectIdentifier,\n      create_At\n    } = nextProps.project_task;\n\n    this.setState({\n      id,\n      projectSequence,\n      summary,\n      acceptanceCriteria,\n      status,\n      priority,\n      dueDate,\n      projectIdentifier,\n      create_At\n    });\n  }\n\n  onChangeHandler = (e) => {\n    const { name, value } = e.target;\n    this.setState({\n        [name]: value\n    })\n}\n\nonSubmitHandler = (e) => {\n  e.preventDefault();\n\n  const UpdateProjectTask = {\n    id: this.state.id,\n    projectSequence: this.state.projectSequence,\n    summary: this.state.summary,\n    acceptanceCriteria: this.state.acceptanceCriteria,\n    status: this.state.status,\n    priority: this.state.priority,\n    dueDate: this.state.dueDate,\n    projectIdentifier: this.state.projectIdentifier,\n    create_At: this.state.create_At\n  };\n\n  this.props.updateProjectTask(\n    this.state.projectIdentifier,\n    this.state.projectSequence,\n    UpdateProjectTask,\n    this.props.history\n  )\n}\n\n\n\n\n  render() {\n\n\n    const { errors } = this.state\n\n\n    return (\n      <div className=\"add-PBI\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-8 m-auto\">\n            <Link\n                to={`/projectBoard/${this.state.projectIdentifier}`}\n                className=\"btn btn-light\"\n              >\n                Back to Project Board\n            \n              </Link>\n              <h4 className=\"display-4 text-center\">Update Project Task</h4>\n              <p className=\"lead text-center\">\n                Project Name: {this.state.projectIdentifier} | Project Task ID:{\" \"}\n                {this.state.projectSequence}{\" \"}\n              </p>\n              <form onSubmit={this.onSubmitHandler}>\n                <div className=\"form-group\">\n                  <input\n                    type=\"text\"\n                    className={classnames(\"form-control form-control-lg\", {\n                      \"is-invalid\": errors.summary\n                    })}\n                    name=\"summary\"\n                    placeholder=\"Project Task summary\"\n                    value={this.state.summary}\n                    onChange={this.onChangeHandler}\n                  />\n                    {errors.summary && (\n                    <div className=\"invalid-feedback\">{errors.summary}</div>\n                  )}\n                </div>\n                <div className=\"form-group\">\n                  <textarea\n                    className=\"form-control form-control-lg\"\n                    placeholder=\"Acceptance Criteria\"\n                    name=\"acceptanceCriteria\"\n                    value={this.state.acceptanceCriteria}\n                    onChange={this.onChangeHandler}\n                  />\n                </div>\n                <h6>Due Date</h6>\n                <div className=\"form-group\">\n                  <input\n                    type=\"date\"\n                    className=\"form-control form-control-lg\"\n                    name=\"dueDate\"\n                    value={this.state.dueDate}\n                    onChange={this.onChangeHandler}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <select\n                    className=\"form-control form-control-lg\"\n                    name=\"priority\"\n                    value={this.state.priority}\n                    onChange={this.onChangeHandler}\n                  >\n                    <option value={0}>Select Priority</option>\n                    <option value={1}>High</option>\n                    <option value={2}>Medium</option>\n                    <option value={3}>Low</option>\n                  </select>\n                </div>\n\n                <div className=\"form-group\">\n                  <select\n                    className=\"form-control form-control-lg\"\n                    name=\"status\"\n                    value={this.state.status}\n                    onChange={this.onChangeHandler}\n                  >\n                    <option value=\"\">Select Status</option>\n                    <option value=\"TO_DO\">TO DO</option>\n                    <option value=\"IN_PROGRESS\">IN PROGRESS</option>\n                    <option value=\"DONE\">DONE</option>\n                  </select>\n                </div>\n\n                <input\n                  type=\"submit\"\n                  className=\"btn btn-primary btn-block mt-4\"\n                />\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\n\nconst mapStateToProps = state => {\n    return {\n        project_task: state.backlog.project_task,\n        errors: state.errors.errors\n    }\n  \n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        getProjectTask: (backlog_id, pt_id, history) => dispatch(actions.getProjectTask(backlog_id, pt_id, history)),\n        updateProjectTask: (backlog_id, pt_id, project_task, history) => dispatch(actions.updateProjectTask(backlog_id, pt_id, project_task, history))\n    }\n}\n\nUpdateProjectTask.propTypes = {\n    getProjectTask: PropTypes.func.isRequired,\n    project_task: PropTypes.object.isRequired,\n    errors: PropTypes.object.isRequired\n  };\n\nexport default connect(mapStateToProps,mapDispatchToProps)(UpdateProjectTask);","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from 'react-redux';\n\nclass Landing extends Component {\n\n\n  componentDidMount() {\n    if(this.props.security.validToken) {\n      this.props.history.push('/dashboard')\n    }\n  }\n\n  render() {\n\n\n\n\n\n    return (\n      <div className=\"landing\">\n        <div className=\"light-overlay landing-inner text-dark\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12 text-center\">\n                <h1 className=\"display-3 mb-4\">\n                  Personal Project Management Tool\n                </h1>\n                <p className=\"lead\">\n                  Create your account to join active projects or start your own\n                </p>\n                <hr />\n                <Link className=\"btn btn-lg btn-primary mr-2\" to=\"/register\">\n                  Sign Up\n                </Link>\n                <Link className=\"btn btn-lg btn-secondary mr-2\" to=\"/login\">\n                  Login\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    security: state.security\n  }\n}\n\nexport default connect(mapStateToProps)(Landing);","import React, { Component } from \"react\";\nimport * as actions from '../../store/actions';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport classnames from 'classnames';\n\nclass Register extends Component {\n\n  state = {\n    username: '',\n    fullName:'',\n    password:'',\n    confirmPassword:'',\n    errors: {}\n  }\n\n  componentDidMount() {\n    if(this.props.security.validToken) {\n      this.props.history.push('/dashboard')\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if(nextProps.errors) {\n      this.setState({errors: nextProps.errors})\n    }\n  }\n\n  onChangeHandler = (e) => {\n    const { name, value } = e.target;\n    this.setState({\n        [name]: value\n    })\n}\n\nonSubmitHandler = (e) => {\n  e.preventDefault()\n  const newUser = {\n      username: this.state.username,\n      fullName: this.state.fullName,\n      password: this.state.password,\n      confirmPassword: this.state.confirmPassword,\n  }\n  this.props.createNewUser(newUser, this.props.history)\n}\n\n  render() {\n\n    const { errors } = this.state\n\n    return (\n      <div className=\"register\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-8 m-auto\">\n              <h1 className=\"display-4 text-center\">Sign Up</h1>\n              <p className=\"lead text-center\">Create your Account</p>\n              <form action=\"create-profile.html\" onSubmit={this.onSubmitHandler}>\n                <div className=\"form-group\">\n                  <input\n                    type=\"text\"\n                    className={classnames(\"form-control form-control-lg\", {\n                      \"is-invalid\": errors.fullName\n                    })}\n                    placeholder=\"Full Name\"\n                    name=\"fullName\"\n                    value={this.state.fullName}\n                    onChange={this.onChangeHandler}\n                  />\n                    {errors.fullName && (\n                    <div className=\"invalid-feedback\">{errors.fullName}</div>\n                  )}\n                </div>\n                <div className=\"form-group\">\n                  <input\n                    type=\"email\"\n                    className={classnames(\"form-control form-control-lg\", {\n                      \"is-invalid\": errors.username\n                    })}\n                    placeholder=\"Email Address (Username)\"\n                    name=\"username\"\n                    value={this.state.username}\n                    onChange={this.onChangeHandler}\n                  />\n                  {errors.username && (\n                    <div className=\"invalid-feedback\">{errors.username}</div>\n                  )}\n                </div>\n                <div className=\"form-group\">\n                  <input\n                    type=\"password\"\n                    className={classnames(\"form-control form-control-lg\", {\n                      \"is-invalid\": errors.password\n                    })}\n                    placeholder=\"Password\"\n                    name=\"password\"\n                    value={this.state.password}\n                    onChange={this.onChangeHandler}\n                  />\n                  {errors.password && (\n                    <div className=\"invalid-feedback\">{errors.password}</div>\n                  )}\n                </div>\n                <div className=\"form-group\">\n                  <input\n                    type=\"password\"\n                    className={classnames(\"form-control form-control-lg\", {\n                      \"is-invalid\": errors.confirmPassword\n                    })}\n                    placeholder=\"Confirm Password\"\n                    name=\"confirmPassword\"\n                    value={this.state.confirmPassword}\n                    onChange={this.onChangeHandler}\n                  />\n                  {errors.confirmPassword && (\n                    <div className=\"invalid-feedback\">\n                      {errors.confirmPassword}\n                    </div>\n                  )}\n                </div>\n                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nconst mapStateToProps = state => {\n  return {\n    errors: state.errors.errors,\n    security: state.security\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n      createNewUser: (newUser, history) => dispatch(actions.createNewUser(newUser, history))\n  }\n}\n\n\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","import React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport classnames from 'classnames';\nimport * as actions from '../../store/actions'\n\nclass Login extends Component {\n\n  state = {\n    username: '',\n    password: '',\n    errors: {}\n  }\n\n  componentDidMount() {\n    if(this.props.security.validToken) {\n      this.props.history.push('/dashboard')\n    }\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.security.validToken) {\n      this.props.history.push(\"/dashboard\");\n    }\n    if (nextProps.errors) {\n      this.setState({ errors: nextProps.errors });\n    }\n  }\n\n  onChangeHandler = (e) => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value\n    })\n  }\n\n  onSubmitHandler = (e) => {\n    e.preventDefault()\n    const LoginRequest = {\n      username: this.state.username,\n      password: this.state.password\n    }\n    this.props.login(LoginRequest)\n  }\n\n\n\n  render() {\n\n    const { errors } = this.state;\n\n\n    return (\n      <div className=\"login\">\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-md-8 m-auto\">\n              <h1 className=\"display-4 text-center\">Log In</h1>\n              <form action=\"dashboard.html\" onSubmit={this.onSubmitHandler}>\n                <div className=\"form-group\">\n                  <input\n                    type=\"text\"\n                    className={classnames(\"form-control form-control-lg\", {\n                      \"is-invalid\": errors.username\n                    })}\n                    placeholder=\"Email Address\"\n                    name=\"username\"\n                    value={this.state.username}\n                    onChange={this.onChangeHandler}\n                  />\n                  {errors.username && (\n                    <div className=\"invalid-feedback\">{errors.username}</div>\n                  )}\n                </div>\n                <div className=\"form-group\">\n                  <input\n                    type=\"password\"\n                    className={classnames(\"form-control form-control-lg\", {\n                      \"is-invalid\": errors.password\n                    })}\n                    placeholder=\"Password\"\n                    name=\"password\"\n                    value={this.state.password}\n                    onChange={this.onChangeHandler}\n                  />\n                  {errors.password && (\n                    <div className=\"invalid-feedback\">{errors.password}</div>\n                  )}\n                </div>\n                <input type=\"submit\" className=\"btn btn-info btn-block mt-4\" />\n              </form>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    security: state.security,\n    errors: state.errors.errors\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    login: (LoginRequest) => dispatch(actions.login(LoginRequest))\n  }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nconst SecuredRoute = ({ component: Component, security, ...otherProps}) => (\n    <Route\n    {...otherProps}\n    render={props =>\n    security.validToken === true ? (\n        <Component {...props} />\n    ) : (\n        <Redirect to='/login' />\n    )}\n    />\n)\n\nconst mapStateToProps = state => {\n    return {\n        security: state.security\n    }\n}\n\nexport default connect(mapStateToProps)(SecuredRoute)","import React from 'react';\nimport Dashboard from './components/Dashboard';\nimport Header from './components/layout/Header';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport AddProject from './components/project/AddProject';\nimport UpdateProject from './components/project/UpdateProject';\nimport ProjectBoard from './components/projectBoard/ProjectBoard';\nimport AddProjectTask from './components/projectBoard/projectTasks/AddProjectTask';\nimport UpdateProjectTask from './components/projectBoard/projectTasks/UpdateProjectTask';\nimport Landing from './components/layout/Landing';\nimport Register from './components/userManagement/Register';\nimport Login from './components/userManagement/Login';\nimport noMatch from './components/project/noMatch';\nimport SecuredRoute from './securityUtils/SecureRoute'\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <Header />\n\n        <Route exact path='/' component={Landing} />\n        <Route exact path='/register' component={Register} />\n        <Route exact path='/login' component={Login} />\n\n\n      <Switch>\n        <SecuredRoute exact path='/dashboard' component={Dashboard} />\n        <SecuredRoute exact path='/addProject' component={AddProject} />\n        <SecuredRoute exact path='/updateProject/:id' component={UpdateProject} />\n        <SecuredRoute exact path='/projectBoard/:id' component={ProjectBoard} />\n        <SecuredRoute exact path='/addProjectTask/:id' component={AddProjectTask} />\n        <SecuredRoute exact path='/updateProjectTask/:backlog_id/:pt_id' component={UpdateProjectTask} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from '../actions/actionTypes'\n\nconst INITIAL_STATE = {\n    errors: false\n}\n\nconst reducer = (state = INITIAL_STATE, action) => {\n    switch(action.type) {\n        case actionTypes.GET_ERRORS:\n            return {\n                errors: action.payload\n            }\n        default:\n            return state\n    }\n}\n\nexport default reducer;","import * as actionTypes from '../actions/actionTypes'\n\nconst INITIAL_STATE = {\n    projects: [],\n    project: {}\n}\n\nconst reducer = (state = INITIAL_STATE, action) => {\n    switch(action.type) {\n        case actionTypes.GET_PROJECTS:\n            return {\n                ...state,\n                projects: action.payload\n            }\n        case actionTypes.GET_PROJECT:\n            return {\n                ...state,\n                project: action.payload\n            }\n        case actionTypes.UPDATE_PROJECT:\n            return {\n                ...state,\n                project: action.payload\n            }\n        case actionTypes.DELETE_PROJECT:\n            return {\n                ...state,\n                projects: state.projects.filter(project => project.projectIdentifier !== action.payload)\n            }\n        default:\n            return state\n    }\n}\n\nexport default reducer;","import * as actionTypes from '../actions/actionTypes'\n\nconst INITIAL_STATE = {\n    project_tasks: [],\n    project_task: {}\n}\n\nconst reducer = (state = INITIAL_STATE, action) => {\n    switch(action.type) {\n        case actionTypes.GET_BACKLOG:\n            return {\n                ...state,\n                project_tasks: action.payload\n            }\n        case actionTypes.GET_PROJECT_TASK:\n            return {\n                ...state,\n                project_task: action.payload\n            }\n        case actionTypes.DELETE_PROJECT_TASK:\n            return {\n                ...state,\n                project_tasks: state.project_tasks.filter(\n                  project_task => project_task.projectSequence !== action.payload\n                )\n            }\n        default:\n            return state\n    }\n}\n\nexport default reducer;","import * as actionTypes from '../actions/actionTypes'\n\nconst initialState = {\n  validToken: false,\n  user: {}\n};\n\nconst booleanActionPayload = payload => {\n  if (payload) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_USER:\n      return {\n        ...state,\n        validToken: booleanActionPayload(action.payload),\n        user: action.payload\n      };\n\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware, compose, combineReducers} from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport errorReducer from './store/reducers/errorReducer';\nimport projectReducer from './store/reducers/projectReducer';\nimport backlogReducer from './store/reducers/backlogReducer';\nimport securityReducer from './store/reducers/securityReducer';\nimport jwt_decode from 'jwt-decode';\nimport setJWTToken from './securityUtils/setJWTToken';\nimport * as actionTypes from './store/actions/actionTypes';\nimport * as actions from './store/actions'\n\n\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({\n  errors: errorReducer,\n  project: projectReducer,\n  backlog: backlogReducer,\n  security: securityReducer\n})\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)))\n\nconst jwtToken = localStorage.jwtToken\n\nif(jwtToken) {\n  setJWTToken(jwtToken)\n  const decoded_jwtToken = jwt_decode(jwtToken)\n  store.dispatch({\n    type: actionTypes.SET_CURRENT_USER,\n    payload: decoded_jwtToken\n  })\n\n  const currentTime = Date.now() / 1000;\n  if(decoded_jwtToken.exp < currentTime) {\n    store.dispatch(actions.logout())\n    window.location.href = '/'\n  }\n\n\n}\n\nconst app = (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}